type ControlProtocol {
  name: String!
  version: String!
}

type LightState {
  # is the light on or off?
  on_off: Boolean 
  
  mode: String
  
  # rotation degree (0-360) of hue
  hue: Int

  # saturation percent (0-100) of the light
  saturation: Int

  # (kelvin: 1700-27000) of the light
  color_temp: Int

  # brightness percent (0-100) of the light
  brightness: Int
}

type Light {
  id: String!
  sw_ver:  String!
  hw_ver:  String!
  mic_type:  String!
  model:  String!
  mac:  String!
  dev_name:  String!
  alias: String!
  relay_state: Int!
  on_time: Int!
  active_mode:  String!
  feature:  String!
  updating: Boolean!
  icon_hash:  String!
  rssi: Int!
  led_off: Boolean!
  longitude: Int!
  latitude: Int!
  hwId:  String!
  fwId:  String!
  deviceId: String!
  oemId: String!
}

# Queries you can run that give you information
type Query {
  # get list of lights seen
  getAllLights: [Light]
  
  # get info about a single light
  getLight(id: ID!): Light
}

# Mutations that modify the state of thigns
type Mutation {
  # turn light on or off, optionally use transitionTime (in ms)
  power(id:ID!, state:Boolean!, transitionTime:Int = 0): LightState

  # set the color-temp (kelvin: 1700-27000) of the light
  temp(id:ID!, transitionTime:Int = 0, temp: Int!): LightState

  # set the brightness (0-100) of the light
  brightness(id:ID!, transitionTime:Int = 0, brightness: Int!): LightState

  # set the color of the light
  color(id:ID!, transitionTime:Int = 0, color: String!): LightState
}
