type ControlProtocol {
  name: String!
  version: String!
}

type LightState {
  on_off: Boolean # is the light on or off?
  mode: String
  hue: Int        # rotation degree (0-360) of hue
  saturation: Int # saturation percent (0-100) of the light
  color_temp: Int # (kelvin: 1700-27000) of the light
  brightness: Int # brightness percent (0-100) of the light
}

type Light {
  id: ID!                         # ID used for other queries
  sw_ver: String!
  hw_ver: String!
  model: String!
  description: String!
  alias: String!
  mic_type: String!
  dev_state: String!
  mic_mac: String!
  oemId: String!
  hwId: String!
  is_factory: Boolean!             # is the device factory-reset?
  disco_ver: String!
  ctrl_protocols: ControlProtocol!
  light_state: LightState!
  is_dimmable: Int!                # can it be dimmed?
  is_color: Int!                   # can it do actual colors?
  is_variable_color_temp: Int!     # can it do color-temp
  preferred_state: [LightState]!
  rssi: Int!
  active_mode: String!
  heapsize: Int!
}

# Queries you can run that give you information
type Query {
  # get list of lights seen
  getAllLights: [Light]
  
  # get info about a single light
  getLight(id: ID!): Light
}

# Mutations that modify the state of thigns
type Mutation {
  # turn light on or off, optionally use transitionTime (in ms)
  power(id:ID!, state:Boolean!, transitionTime:Int = 0): LightState

  # set the color-temp (kelvin: 1700-27000) of the light
  temp(id:ID!, transitionTime:Int = 0, temp: Int!): LightState

  # set the brightness (0-100) of the light
  brightness(id:ID!, transitionTime:Int = 0, brightness: Int!): LightState

  # set the color of the light
  color(id:ID!, transitionTime:Int = 0, color: String!): LightState
}
